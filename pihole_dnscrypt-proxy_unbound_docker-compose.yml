--- # Specifies the start of the file
version: "3.4" # The version of docker compose it uses

# More info at https://github.com/jacklul/pihole-updatelists#install-with-docker, https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
services: # The services it will provide
  pihole:
    container_name: pihole # Name of container
    network_mode: host # Make the container not isolated from the Docker hosts network. Allows you to connect to the hosts localhost instead of the containers
    image: jacklul/pihole:latest # The image the container will use
    # The ports
    ports:
      - "53:53/tcp" # DNS services
      - "53:53/udp" # DNS services
      #- "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "80:80/tcp" # HTTP WEB GUI Service
      - "443:443" # Not sure if this is needed
    environment:
      TZ: 'America/Chicago' # The TimeZone
      PIHOLE_DNS_: '1.1.1.1;1.0.0.1' # Can set Upstream DNS server(s) to DNSCrypt-proxy"127.0.0.1#5053;127.0.0.1#5053" or Unbound"127.0.0.1#5335;127.0.0.1#5335" if you dont want to use any of those Quad9"9.9.9.9;149.112.112.112" might be a good alternative
      DNSMASQ_LISTENING: 'all' # Permits listening on internet origin subnets in addition to local
      ADLISTS_URL: 'https://v.firebog.net/hosts/lists.php?type=tick' # Remote list URL containing list of adlists to import
      WHITELIST_URL: 'https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/whitelist.txt' # Remote list URL containing exact domains to whitelist
      #REGEX_WHITELIST_URL: ''
      #BLACKLIST_URL: ''
      REGEX_BLACKLIST_URL: 'https://raw.githubusercontent.com/mmotti/pihole-regex/master/regex.list' # Remote list URL containing regex rules for blacklisting
    # Volumes store your data between container upgrades
    volumes:
      - './pihole_unbound/etc-pihole/:/etc/pihole/' # Volumes for your Pi-hole configs help persist changes across docker image updates
      - './pihole_unbound/etc-dnsmasq.d/:/etc/dnsmasq.d/' # Volumes for your dnsmasq configs help persist changes across docker image updates
      # If you need advanced configuration create a mount to access the config file:
      #- './etc-pihole-updatelists/:/etc/pihole-updatelists/'
    # https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    #cap_add:
    #  - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped # The container always restarts unless stopped by user
    condition: "${ENABLE_PIHOLE}" == "true" # Conditionally enable the service based on the value in .env file
  dnscrypt-proxy:
    container_name: dnscrypt-proxy # Name of container
    network_mode: bridge
    image: klutchell/dnscrypt-proxy:latest # The image the container will use
    # The ports    
    ports:
      - '5053:5053/udp'
      - '5053:5053/tcp'
    environment:
      TZ: 'America/Chicago' # The TimeZone
      server_names: 'cloudflare'
    restart: unless-stopped # The container always restarts unless stopped by user
    condition: "${ENABLE_DNSCRYPT-PROXY}" == "true" # Conditionally enable the service based on the value in .env file
  unbound:
        container_name: unbound # Name of container
        network_mode: bridge # Needed for pihole integration
        ports: # The ports
            - '5335:53/tcp' # Uses a port other then the default one for DNS services
            - '5335:53/udp' # Uses a port other then the default one for DNS services
            #- "443/tcp" # Used for DoH(DNS-over-HTTPS)
        image: mvance/unbound:latest # The image the container will use
        # Volumes store your data between container upgrades
        #volumes:
            #- './pihole_unbound/opt-unbound-etc-unbound/:/opt/unbound/etc/unbound/' # Unbound configuration location
            # Example of a Customized Recursive config see: https://github.com/MatthewVance/unbound-docker/blob/master/unbound.conf
        restart: unless-stopped # The container always restarts unless stopped by user
        condition: "${ENABLE_UNBOUND}" == "true" # Conditionally enable the service based on the value in .env file
